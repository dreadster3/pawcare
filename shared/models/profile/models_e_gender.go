// Code generated by go-swagger; DO NOT EDIT.

package profile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ModelsEGender models e gender
//
// swagger:model models.EGender
type ModelsEGender string

func NewModelsEGender(value ModelsEGender) *ModelsEGender {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ModelsEGender.
func (m ModelsEGender) Pointer() *ModelsEGender {
	return &m
}

const (

	// ModelsEGenderMale captures enum value "Male"
	ModelsEGenderMale ModelsEGender = "Male"

	// ModelsEGenderFemale captures enum value "Female"
	ModelsEGenderFemale ModelsEGender = "Female"
)

// for schema
var modelsEGenderEnum []interface{}

func init() {
	var res []ModelsEGender
	if err := json.Unmarshal([]byte(`["Male","Female"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelsEGenderEnum = append(modelsEGenderEnum, v)
	}
}

func (m ModelsEGender) validateModelsEGenderEnum(path, location string, value ModelsEGender) error {
	if err := validate.EnumCase(path, location, value, modelsEGenderEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this models e gender
func (m ModelsEGender) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateModelsEGenderEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this models e gender based on context it is used
func (m ModelsEGender) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
